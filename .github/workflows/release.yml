name: 🚀 Release Pipeline

# Only triggers on version tags (v*) and manual dispatch
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.2.1)'
        required: true
        type: string
        default: 'v2.2.1'
      dry_run:
        description: 'Dry run (test without creating release)'
        required: false
        type: boolean
        default: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write
  actions: read

jobs:
  release:
    name: 🎉 Release Process
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔢 Extract and Validate Version
        id: version
        run: |
          # Determine version source
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ inputs.version }}"
            echo "📋 Version from manual input: $VERSION"
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
            echo "🏷️ Version from tag: $VERSION"
          else
            echo "❌ ERROR: Invalid trigger event"
            echo "Event: ${{ github.event_name }}"
            echo "Ref type: ${{ github.ref_type }}"
            exit 1
          fi
          
          # Validate version format
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "❌ ERROR: Invalid version format '$VERSION'"
            echo "Expected format: vX.Y.Z (e.g., v2.1.0)"
            exit 1
          fi
          
          # Extract version number (remove 'v' prefix)
          VERSION_NUMBER="${VERSION#v}"
          
          # Output results
          {
            echo "version=$VERSION"
            echo "version_number=$VERSION_NUMBER"
          } >> "$GITHUB_OUTPUT"
          
          echo "✅ Version validation passed: $VERSION ($VERSION_NUMBER)"

      - name: 🧪 Run Tests
        run: |
          echo "🧪 Running tests..."
          # Basic script validation
          chmod +x bin/portkill
          ./bin/portkill --version
          ./bin/portkill --help >/dev/null
          echo "✅ Tests passed"

      - name: 📦 Create GitHub Release
        if: github.event.inputs.dry_run != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "PortKill ${{ steps.version.outputs.version }}"
          body: |
            ## 🚀 Release ${{ steps.version.outputs.version }}
            
            ### 📦 Installation
            ```bash
            brew tap mr-tanta/portkill
            brew install portkill
            ```
            
            ### 🔧 Usage
            ```bash
            portkill 3000
            ```
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            bin/portkill
            install.sh
            uninstall.sh

      - name: 🎉 Success Message
        run: |
          echo "✅ Release workflow completed successfully!"
          echo "Version: ${{ steps.version.outputs.version }}"
          echo "Event: ${{ github.event_name }}"
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "🧪 DRY RUN MODE - No release created"
          else
            echo "📦 Release created successfully"
          fi
